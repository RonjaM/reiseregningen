<?xml version="1.0" encoding="utf-8"?>

<!-- SHORT DESC: BASE FORM INPUT VIEW FOR TRAVEL ADVANCES -->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns:advance="no.makingwaves.cust.dss.view.specifications.advance.*"
		xmlns:common="no.makingwaves.cust.dss.view.specifications.common.*"
		xmlns:comp="no.makingwaves.cust.dss.view.components.*"
		creationComplete="init();" move="{removeHelpScreens()}"
		title="{resourceManager.getString(model.resources.bundleName, 'advance_headline_label')}">
	
	<!-- <mx:Style source="assets/reiseregning.css"/> -->
	
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import no.makingwaves.cust.dss.code.util.Util;
			import no.makingwaves.cust.dss.vo.TravelAdvanceVO;
			import mx.effects.easing.Exponential;
			import no.makingwaves.cust.dss.model.ModelLocator;
			import mx.managers.PopUpManager;
			import no.makingwaves.util.keycontroller.KeyCombo;
			import no.makingwaves.util.keycontroller.KeyController;
			import no.makingwaves.util.keycontroller.KeyControllerEvent;
			
			[Bindable]
			public var model : ModelLocator = ModelLocator.getInstance();
			
			[Bindable]
			public var travel_advance : TravelAdvanceVO;
			
			public var _editMode : Boolean;
			
			private function init():void {
				//PopUpManager.centerPopUp(this);
                this.x = (this.stage.width / 2) - (this.width / 2);
				this.y += (model.positionParameter) - (this.height / 2);
				
				// initialize help text for this section
				model.helpTextPopUp = Util.checkForLinks(resourceManager.getString(model.resources.bundleName, 'advance_intro_help'));
                
                // check for active/editable specification
                if (this.travel_advance == null) {
                	this.travel_advance = new TravelAdvanceVO();
                	_editMode = false;
                } else {
                	_editMode = true;
                }               
             
                // short-cuts
                registerKeyCombos();     
                
                if (model.screenreader)
                	this.parentApplication.visible = false;       
            
				initAccessibility();          
            }
			
			private function initAccessibility():void {
				if (!model.screenreader) {
					try {
						accessibilitytext.removeChild(this.accessibility_introtext);
					} catch (e:Error) { trace("travel_advances.initAccessibility: " + e.message);}
					
				} else {
					this.accessibility_introtext.savelocal_infobtn.setFocus();
					//model.accessibility.addAccessibility(this.accessibility_introtext, model.helpTextPopUp);
				}
			}
			
			private function registerKeyCombos():void {
				var keyController:KeyController = new KeyController(this);
				// set keyboard shortcuts
				keyController.setKeyWatch(13); 					// ENTER
				keyController.setKeyWatch(27); 					// ESC
				keyController.addEventListener(KeyControllerEvent.KEYCOMBO_PRESSED, keyComboPressed);
			}
		
			private function keyComboPressed(event:KeyControllerEvent):void {
				var pressedCombo:KeyCombo = event.keyCombo;
				if (!pressedCombo.ctrl && !pressedCombo.shift && !pressedCombo.alt) {
					if (pressedCombo.keyCode == 13) {
						this.continueClicked();
					} else if (pressedCombo.keyCode == 27) {
						this.close();
					}
				}
			}
            
            private function autoFillIn():void {
            }
            
            private function continueClicked():void {
            	if (validateForm()) {
            		// submit data from the common form
            		travel_advance = this.boxAdvance.submitData(travel_advance);
            		// calculate this accomodation cost
					model.calculator.calculateTraveladvance(travel_advance);
						
					if (!_editMode) {
		            	model.travelAdvanceList.addItem(boxAdvance.travel_advance);
		            }
		            close();
	           }
            }
            
            private function validateForm():Boolean {
            	var validMain : Boolean = true;
            	validMain = this.boxAdvance.validateDetailsForm();
        		if (validMain) {
            		validMain = this.boxAdvance.validateCustomFields();
            	}
            	return (validMain);
            }

            private function close():void {
            	if (model.screenreader)
                	this.parentApplication.visible = true;
                	
            	// remove validators
	            this.boxAdvance.disableValidation();
            	// remove pop-up
                this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
                //PopUpManager.removePopUp(this);
            }
            
            private function clearFields():void {
            	// reset references/bindings
            	this.travel_advance = new TravelAdvanceVO();

            	button_ok.label = resourceManager.getString(model.resources.bundleName, button_ok.id);
            	
            }
            
            private function removeHelpScreens():void {
            	try {
            		boxAdvance.undisplayAllValidators();
            	} catch (e:Error) { trace("travel_advances.removeHelpScreens: " + e.message); }
            }

		]]>
	</mx:Script>
	
	<!-- CONTENT ====================================================================== -->
	<mx:VBox paddingTop="10" paddingBottom="10" paddingLeft="10" paddingRight="10" backgroundColor="#FFFFFF">
		<mx:Box id="accessibilitytext" width="100%">
			<comp:infobutton id="accessibility_introtext" buttonTabIndex="1200" textReference="{model.helpTextPopUp}" />
		</mx:Box>
		
		<mx:HBox width="100%">
	    	<advance:advance id="boxAdvance" width="100%" travel_advance="{this.travel_advance}" />
			
			<mx:VRule height="100%" />
			
			<mx:VBox id="helpText" width="150" height="{boxAdvance.height}" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:Text htmlText="{model.helpTextPopUp}" width="100%" />  			
			</mx:VBox>
			
		</mx:HBox>	
	</mx:VBox>
	
	<mx:Canvas width="100%" styleName="WindowedNavigation">
		<mx:HBox right="0">
			<mx:Button id="button_cancel" styleName="secondary" height="22" tabIndex="1821"
						click="{close()}"
						label="{resourceManager.getString(model.resources.bundleName, button_cancel.id)}" />
				
			<mx:Button id="button_ok" styleName="secondary"  height="22" tabIndex="1820"
						click="{continueClicked()}"
						label="{resourceManager.getString(model.resources.bundleName, button_ok.id)}" />
					
		</mx:HBox>	
	</mx:Canvas>
	
</mx:TitleWindow>
