<?xml version="1.0" encoding="utf-8"?>
<code:BasicFormBase
			xmlns:code="no.makingwaves.cust.dss.code.*"
			xmlns:view="no.makingwaves.cust.dss.view.*"
			xmlns:common="no.makingwaves.cust.dss.view.specifications.transport.common.*"
			xmlns:mx="http://www.adobe.com/2006/mxml"
			creationComplete="init()">
			
	<mx:Script>
		<![CDATA[
			import no.makingwaves.cust.dss.vo.MotorcycleSpecificationVO;
			import mx.events.ValidationResultEvent;
			import no.makingwaves.cust.dss.vo.TravelSpecificationVO;
			import no.makingwaves.cust.dss.model.ModelLocator;
			
			[Bindable]
			public var travelspecifications : TravelSpecificationVO;
			
			[Bindable]
			public var motorcyclespecifications : MotorcycleSpecificationVO;
						
			private function init():void {
				motorcyclespecifications = new MotorcycleSpecificationVO();
				try {
					if (travelspecifications.specification != null) {
						motorcyclespecifications = travelspecifications.specification;
					}
				} catch (e:Error) { 
					trace("motorcycle.init: " + e.message);
					motorcyclespecifications = new MotorcycleSpecificationVO();
				}
				// add accessibility
                model.accessibility.addAccessibility(motorcycle_type_radio1, resourceManager.getString(model.resources.bundleName, 'motorcycle_type_label'));
                model.accessibility.addAccessibility(motorcycle_type_radio2, resourceManager.getString(model.resources.bundleName, 'motorcycle_type_label'));
			}
			
			override public function validateDetailsForm():Boolean {
				var validation:Boolean = super.validateDetailsForm();
				if (validation)
					validation = distance.validateAll();
					
				if (validation) {
					if (this.motorcycle_type.selectedValue != motorcyclespecifications.TYPE_ABOVE_125CC && this.motorcycle_type.selectedValue != motorcyclespecifications.TYPE_BELOW_125CC) {
						validation = false;
						var validationText:String = resourceManager.getString(model.resources.bundleName, "motorcycle_type_validator");;
						this.showValidationError(this.motorcycle_type_radio2, validationText);
					}
				}
				return validation;
			}
             
			override public function submitData(specifications:*):* {
				motorcyclespecifications.distance = distance.getDistance();
				motorcyclespecifications.motorcycle_type = Number(motorcycle_type.selectedValue);
				travelspecifications.specification = motorcyclespecifications;
	           	return TravelSpecificationVO(specifications);
            }
		]]>
	</mx:Script>

	<mx:HBox paddingTop="10" paddingBottom="10">
		
		<common:distance id="distance" width="100%" paddingTop="10" paddingRight="10" travelspecifications="{travelspecifications}" />
		
		<mx:VBox>
			<mx:Label id="motorcycle_type_label" text="{resourceManager.getString(model.resources.bundleName, motorcycle_type_label.id)}" styleName="form" />
			<mx:HBox id="motorcycle_type_box">
				<mx:RadioButtonGroup id="motorcycle_type" selectedValue="{motorcyclespecifications.motorcycle_type}" />
				<mx:RadioButton id="motorcycle_type_radio1" label="{resourceManager.getString(model.resources.bundleName, motorcycle_type_radio1.id)}" value="{motorcyclespecifications.TYPE_ABOVE_125CC}" groupName="motorcycle_type" tabIndex="1670" />
				<mx:RadioButton id="motorcycle_type_radio2" label="{resourceManager.getString(model.resources.bundleName, motorcycle_type_radio2.id)}" value="{motorcyclespecifications.TYPE_BELOW_125CC}" groupName="motorcycle_type" tabIndex="1671" />
			</mx:HBox>
		</mx:VBox>
		
	</mx:HBox>
		
</code:BasicFormBase>
